Changes in module 'nf-core/gtdbtk/classifywf'
--- modules/nf-core/gtdbtk/classifywf/meta.yml
+++ modules/nf-core/gtdbtk/classifywf/meta.yml
@@ -17,69 +17,27 @@
       doi: "10.1093/bioinformatics/btz848"
       licence: ["GNU General Public v3 (GPL v3)"]
 input:
-  - meta:
-      type: map
-      description: |
-        Groovy Map containing sample information
-        e.g. [ id:'test', single_end:false,  assembler:'spades' ]
-  - bins:
-      type: file
-      description: The binned fasta files from the assembler
-      pattern: "*.{fasta,fa}"
-  - database:
-      type: file
-      description: The local copy of the taxonomic database used by GTDB-tk (unzipped copy)
-      pattern: "*"
-  - mash_db:
-      type: file
-      description: The local copy of the Mash sketch database used by GTDB-tk if `ani_screen` mode is used (optional)
-      pattern: "*.msh"
+  - sample:
+      type: val
+      description: Sample name.
+  - files:
+      type: directory
+      description: Path where the files containing nucleic acid sequence file in FASTA format "*.{fasta,fna,fa}".
+      pattern: 
+  - change_dot_for_underscore:
+      type: string
+      description: Output from the process CHANGE_DOT_FOR_UNDERSCORE indicating that dots were removed from the file name.
+  - gtdbtk2_db:
+      type: string
+      description: Output from the process GTDBTK2_DB indicating that GTDB-Tk2 database was downloaded successfully.
 output:
-  - meta:
-      type: map
-      description: |
-        Groovy Map containing sample information
-        e.g. [ id:'test', single_end:false ]
+  - gtdbtk2:
+      type: directory
+      description: Directory containing all the files generated.
   - versions:
       type: file
       description: File containing software versions
       pattern: "versions.yml"
-  - summary:
-      type: file
-      description: A TSV summary file for the classification
-      pattern: "*.{summary.tsv}"
-  - tree:
-      type: file
-      description: NJ or UPGMA tree in Newick format produced from a multiple sequence alignment
-      pattern: "*.{classify.tree.gz}"
-  - markers:
-      type: file
-      description: A TSV summary file lineage markers used for the classification.
-      pattern: "*.{markers_summary.tsv}"
-  - msa:
-      type: file
-      description: Multiple sequence alignments file.
-      pattern: "*.{msa.fasta.gz}"
-  - user_msa:
-      type: file
-      description: Multiple sequence alignments file for the user-provided files.
-      pattern: "*.{user_msa.fasta.gz}"
-  - filtered:
-      type: file
-      description: A list of genomes with an insufficient number of amino acids in MSA..
-      pattern: "*.{filtered.tsv}"
-  - log:
-      type: file
-      description: GTDB-tk log file
-      pattern: "*.{log}"
-  - warnings:
-      type: file
-      description: GTDB-tk warnings log file
-      pattern: "*.{warnings.log}"
-  - failed:
-      type: file
-      description: A TSV summary of the genomes which GTDB-tk failed to classify.
-      pattern: "*.{failed_genomes.tsv}"
 authors:
   - "@skrakau"
   - "@abhi18av"

--- modules/nf-core/gtdbtk/classifywf/main.nf
+++ modules/nf-core/gtdbtk/classifywf/main.nf
@@ -1,99 +1,48 @@
-process GTDBTK_CLASSIFYWF {
-    tag "${prefix}"
-    label 'process_medium'
+process GTDBTK2 {
+	tag "$sample"
+	label 'process_high'
 
-    // WARN: Version information not provided by tool on CLI. Please update version string below when bumping container versions.
-    conda "${moduleDir}/environment.yml"
-    container "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
-        'https://depot.galaxyproject.org/singularity/gtdbtk:2.4.0--pyhdfd78af_1' :
-        'biocontainers/gtdbtk:2.4.0--pyhdfd78af_1' }"
+	conda "bioconda::gtdbtk=2.4.0"
+        container "${ params.use_singularity ?
+            'https://depot.galaxyproject.org/singularity/gtdbtk:2.4.0--pyhdfd78af_0' :
+            'biocontainers/gtdbtk:2.4.0--pyhdfd78af_0' }"
+	containerOptions "${ params.directory_to_bind == null ? '' : "--bind ${params.directory_to_bind}" }"
 
-    input:
-    tuple val(meta), path("bins/*")
-    tuple val(db_name), path("database/*")
-    path(mash_db)
+	input:
+	tuple val(sample), path(files), val(change_dot_for_underscore)
+	val "gtdbtk2_db"
 
-    output:
-    tuple val(meta), path("gtdbtk.${prefix}.*.summary.tsv")         , emit: summary
-    tuple val(meta), path("gtdbtk.${prefix}.*.classify.tree.gz")    , emit: tree, optional: true
-    tuple val(meta), path("gtdbtk.${prefix}.*.markers_summary.tsv") , emit: markers, optional: true
-    tuple val(meta), path("gtdbtk.${prefix}.*.msa.fasta.gz")        , emit: msa, optional: true
-    tuple val(meta), path("gtdbtk.${prefix}.*.user_msa.fasta.gz")   , emit: user_msa, optional: true
-    tuple val(meta), path("gtdbtk.${prefix}.*.filtered.tsv")        , emit: filtered, optional: true
-    tuple val(meta), path("gtdbtk.${prefix}.failed_genomes.tsv")    , emit: failed, optional: true
-    tuple val(meta), path("gtdbtk.${prefix}.log")                   , emit: log
-    tuple val(meta), path("gtdbtk.${prefix}.warnings.log")          , emit: warnings
-    path("versions.yml")                           , emit: versions
+	output:
+	path "gtdbtk2", emit: gtdbtk2
+	path "versions.yml", emit: versions
+	
+	script:
+	def VERSION = '2.4.0'
+	def outdir = params.outdir
+	def mash_db = "${outdir}/${sample}/mash_db"
+	def gtdbtk2_db = params.gtdbtk2_db ?
+				params.gtdbtk2_db :
+				"${outdir}/databases/gtdbtk2"
 
-    when:
-    task.ext.when == null || task.ext.when
-
-    script:
-    def args = task.ext.args ?: ''
-    def pplacer_scratch = params.gtdbtk_pplacer_scratch ? "--scratch_dir pplacer_tmp" : ""
-    def mash_mode = mash_db ? "--mash_db ${mash_db}" : "--skip_ani_screen"
-    prefix = task.ext.prefix ?: "${meta.id}"
-
-    """
-    export GTDBTK_DATA_PATH="\${PWD}/database"
-    if [ ${pplacer_scratch} != "" ] ; then
-        mkdir pplacer_tmp
-    fi
-
-    gtdbtk classify_wf \\
-        $args \\
-        --genome_dir bins \\
-        --prefix "gtdbtk.${prefix}" \\
-        --out_dir "\${PWD}" \\
-        --cpus $task.cpus \\
-        $mash_mode \\
-        $pplacer_scratch \\
-        --min_perc_aa $params.gtdbtk_min_perc_aa \\
-        --min_af $params.gtdbtk_min_af
-
-    ## If mash db given, classify/ and identify/ directories won't be created
-    if [[ -d classify/ ]]; then
-        mv classify/* .
-    fi
-
-    if [[ -d identify/ ]]; then
-        mv identify/* .
-    fi
-
-    ## If nothing aligns, no output, so only run
-    if [[ -d align/ ]]; then
-        mv align/* .
-    fi
-
-    mv gtdbtk.log "gtdbtk.${prefix}.log"
-
-    mv gtdbtk.warnings.log "gtdbtk.${prefix}.warnings.log"
-
-    find -name "gtdbtk.${prefix}.*.classify.tree" | xargs -r gzip # do not fail if .tree is missing
-
-    cat <<-END_VERSIONS > versions.yml
-    "${task.process}":
-        gtdbtk: \$(echo \$(gtdbtk --version -v 2>&1) | sed "s/gtdbtk: version //; s/ Copyright.*//")
-    END_VERSIONS
-    """
-
-    stub:
-    def VERSION = '2.3.2' // WARN: Version information not provided by tool on CLI. Please update this string when bumping container versions.
-    prefix = task.ext.prefix ?: "${meta.id}"
-    """
-    touch gtdbtk.${prefix}.stub.summary.tsv
-    echo "" | gzip > gtdbtk.${prefix}.stub.classify.tree.gz
-    touch gtdbtk.${prefix}.stub.markers_summary.tsv
-    echo "" | gzip > gtdbtk.${prefix}.stub.msa.fasta.gz
-    echo "" | gzip > gtdbtk.${prefix}.stub.user_msa.fasta.gz
-    touch gtdbtk.${prefix}.stub.filtered.tsv
-    touch gtdbtk.${prefix}.log
-    touch gtdbtk.${prefix}.warnings.log
-    touch gtdbtk.${prefix}.failed_genomes.tsv
-
-    cat <<-END_VERSIONS > versions.yml
-    "${task.process}":
-        gtdbtk: \$(echo "$VERSION")
-    END_VERSIONS
-    """
+	def args = task.ext.args ?: ''
+	"""
+	mkdir -p $mash_db
+	EXTENSION=\$(echo "\$(ls ${files}/* | head -n 1 | rev | cut -d. -f1 | rev)")
+	release="release"; if echo "$gtdbtk2_db" | grep -q -E "\$release"; \
+	then version=""; else version=\$(ls "$gtdbtk2_db"); fi
+	export GTDBTK_DATA_PATH="$gtdbtk2_db/\$version"
+	gtdbtk classify_wf \
+	--genome_dir $files \
+	-x \$EXTENSION \
+	--out_dir gtdbtk2 --cpus $task.cpus \
+	--mash_db $mash_db \
+	--tmpdir "${outdir}/${sample}" \
+	--scratch_dir "${outdir}/${sample}" \
+	$args
+	
+	cat <<-END_VERSIONS > versions.yml
+	"${task.process}":
+		gtdbtk: \$(echo "$VERSION")
+	END_VERSIONS
+	"""
 }

************************************************************
